// personal-app-frontend/src/pages/initiator/Requests.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../../services/api';
import './Requests.css';

const Requests = () => {
  const [requests, setRequests] = useState([]);
  const [filterMode, setFilterMode] = useState('my'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–í–∞—à–∏ –∑–∞—è–≤–∫–∏"
  const [filters, setFilters] = useState(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ localStorage
    const saved = localStorage.getItem('requests_filters');
    return saved ? JSON.parse(saved) : {
      status: '',
      specialty: '',
      dateFrom: '',
      dateTo: ''
    };
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadRequests();
  }, [filterMode]);

  useEffect(() => {
    localStorage.setItem('requests_filters', JSON.stringify(filters));
  }, [filters]);

  const loadRequests = async () => {
    try {
      setLoading(true);
      let endpoint = '/work-requests';
      if (filterMode === 'my') {
        endpoint = '/my/work-requests'; // –£–±—Ä–∞–ª /api - —É–∂–µ –µ—Å—Ç—å –≤ baseURL
      }
      
      const response = await api.get(endpoint);
      const data = response.data.data || response.data;
      setRequests(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error('Error:', err);
      setRequests([]);
    } finally {
      setLoading(false);
    }
  };

  // –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (requests.length > 0) {
      console.log('=== –û–¢–õ–ê–î–ö–ê –î–ê–ù–ù–´–• –ó–ê–Ø–í–û–ö ===');
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫:', requests.length);
      console.log('–ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞:', requests[0]);
      console.log('Work_date –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏:', requests[0].work_date);
      console.log('Start_time –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏:', requests[0].start_time);
      console.log('Initiator –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏:', requests[0].initiator);
      console.log('============================');
    }
  }, [requests]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatWorkDate = (dateString) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    
    try {
      const date = new Date(dateString);
      
      if (isNaN(date.getTime())) {
        console.error('Invalid date:', dateString);
        return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
      }
      
      return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        timeZone: 'Europe/Moscow'
      });
    } catch (error) {
      console.error('Date formatting error:', error, dateString);
      return '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  const formatStartTime = (timeString) => {
    if (!timeString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    try {
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:mm"
      if (typeof timeString === 'string' && timeString.includes(':')) {
        const [hours, minutes] = timeString.split(':');
        return `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
      }
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∫–∞–∫ –æ–±—ä–µ–∫—Ç Date
      if (timeString instanceof Date || (typeof timeString === 'string' && timeString.includes('T'))) {
        const time = new Date(timeString);
        return time.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
          timeZone: 'Europe/Moscow'
        });
      }
      
      return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
    } catch (error) {
      console.error('Time formatting error:', error, timeString);
      return '–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
  const formatInitiatorName = (initiator) => {
    if (!initiator) return '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    const name = initiator.name || '';
    const surname = initiator.surname || '';
    
    if (name && surname) {
      return `${name} ${surname}`;
    } else if (name) {
      return name;
    } else if (surname) {
      return surname;
    } else {
      return '–ù–µ —É–∫–∞–∑–∞–Ω';
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  const filteredRequests = requests.filter(request => {
    if (filters.status && request.status !== filters.status) {
      return false;
    }

    if (filters.specialty && request.specialty?.name !== filters.specialty) {
      return false;
    }

    if (filters.dateFrom || filters.dateTo) {
      if (!request.work_date) return false;
      
      const requestDate = new Date(request.work_date);
      
      if (filters.dateFrom) {
        const fromDate = new Date(filters.dateFrom);
        if (requestDate < fromDate) return false;
      }
      
      if (filters.dateTo) {
        const toDate = new Date(filters.dateTo);
        toDate.setHours(23, 59, 59, 999);
        if (requestDate > toDate) return false;
      }
    }
    
    return true;
  });

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
  const uniqueSpecialties = [...new Set(requests
    .filter(req => req.specialty)
    .map(req => req.specialty.name)
  )];

  const getStatusDisplay = (status) => {
    const statusMap = {
      'draft': 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫',
      'published': 'üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞', 
      'in_progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
      'staffed': 'üë• –£–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∞',
      'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    };
    return statusMap[status] || status;
  };

  const getStatusColor = (status) => {
    const colors = {
      'draft': '#6c757d',
      'published': '#17a2b8',
      'in_progress': '#ffc107',
      'staffed': '#28a745',
      'completed': '#20c997'
    };
    return colors[status] || '#6c757d';
  };

  if (loading) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</div>;

  return (
    <div className="requests-page">
      <div className="page-header">
        <div className="header-content">
          <h1>–ó–∞—è–≤–∫–∏</h1>
          <Link to="/initiator/create-request" className="btn-primary">
            + –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É
          </Link>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="filters-panel">
        <div className="filter-group">
          <label>–ü–æ–∫–∞–∑–∞—Ç—å:</label>
          <select 
            value={filterMode} 
            onChange={(e) => setFilterMode(e.target.value)}
            className="filter-select"
          >
            <option value="my">–í–∞—à–∏ –∑–∞—è–≤–∫–∏</option>
            <option value="all">–í—Å–µ –∑–∞—è–≤–∫–∏</option>
          </select>
        </div>

        <div className="filter-group">
          <label>–°—Ç–∞—Ç—É—Å:</label>
          <select 
            value={filters.status} 
            onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
            className="filter-select"
          >
            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
            <option value="published">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞</option>
            <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
            <option value="staffed">–£–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∞</option>
            <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–∞</option>
          </select>
        </div>

        <div className="filter-group">
          <label>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</label>
          <select 
            value={filters.specialty} 
            onChange={(e) => setFilters(prev => ({ ...prev, specialty: e.target.value }))}
            className="filter-select"
          >
            <option value="">–í—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</option>
            {uniqueSpecialties.map(specialty => (
              <option key={specialty} value={specialty}>
                {specialty}
              </option>
            ))}
          </select>
        </div>

        <div className="filter-group">
          <label>–ü–µ—Ä–∏–æ–¥ —Å:</label>
          <input
            type="date"
            value={filters.dateFrom}
            onChange={(e) => setFilters(prev => ({ ...prev, dateFrom: e.target.value }))}
            className="date-input"
          />
        </div>

        <div className="filter-group">
          <label>–ø–æ:</label>
          <input
            type="date"
            value={filters.dateTo}
            onChange={(e) => setFilters(prev => ({ ...prev, dateTo: e.target.value }))}
            className="date-input"
          />
        </div>

        <button 
          onClick={() => setFilters({ status: '', specialty: '', dateFrom: '', dateTo: '' })}
          className="btn-clear"
        >
          –°–±—Ä–æ—Å–∏—Ç—å
        </button>

        <button onClick={loadRequests} className="btn-refresh">
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div style={{ background: '#f8f9fa', padding: '10px', marginBottom: '20px', borderRadius: '5px' }}>
        <small>
          <strong>–û—Ç–ª–∞–¥–∫–∞:</strong> –ó–∞–≥—Ä—É–∂–µ–Ω–æ {requests.length} –∑–∞—è–≤–æ–∫, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {filteredRequests.length}
        </small>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      <div className="table-container">
        <table className="requests-table">
          <thead>
            <tr>
              <th>‚Ññ –ó–∞—è–≤–∫–∏</th>
              <th>–î–∞—Ç–∞ —Ä–∞–±–æ—Ç</th>
              <th>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</th>
              <th>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä</th>
              <th>–ë—Ä–∏–≥–∞–¥–∏—Ä</th>
              <th>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</th>
              <th>–í–∏–¥ —Ä–∞–±–æ—Ç</th>
              <th>–ö–æ–ª-–≤–æ</th>
              <th>–ü—Ä–æ–µ–∫—Ç</th>
              <th>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ</th>
              <th>–ö–æ–º–ø–∞–Ω–∏—è-–ø–ª–∞—Ç–µ–ª—å—â–∏–∫</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {filteredRequests.length === 0 ? (
              <tr>
                <td colSpan="13" className="no-data">
                  {requests.length === 0 ? '–ù–µ—Ç –∑–∞—è–≤–æ–∫' : '–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É'}
                </td>
              </tr>
            ) : (
              filteredRequests.map(request => (
                <tr key={request.id}>
                  <td>
                    <strong>{request.request_number || `–ó–ê–Ø–í–ö–ê-${request.id}`}</strong>
                  </td>
                  <td>
                    <div style={{fontWeight: 'bold'}}>
                      {formatWorkDate(request.work_date)}
                    </div>
                  </td>
                  <td>
                    <div style={{fontWeight: '500'}}>
                      {formatStartTime(request.start_time)}
                    </div>
                  </td>
                  <td>
                    {formatInitiatorName(request.initiator)}
                  </td>
                  <td>{request.brigadier ? formatInitiatorName(request.brigadier) : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</td>
                  <td>{request.specialty?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</td>
                  <td>{request.work_type?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                  <td>{request.workers_count} —á–µ–ª.</td>
                  <td>{request.project || '-'}</td>
                  <td>{request.purpose || '-'}</td>
                  <td>{request.payer_company || '-'}</td>
                  <td>
                    <span 
                      className="status-badge"
                      style={{backgroundColor: getStatusColor(request.status)}}
                    >
                      {getStatusDisplay(request.status)}
                    </span>
                  </td>
                  <td>
                    <div className="actions-cell">
                      <Link 
                        to={`/initiator/requests/${request.id}`}
                        className="action-btn view-btn"
                        title="–ü—Ä–æ—Å–º–æ—Ç—Ä"
                      >
                        üëÅÔ∏è
                      </Link>
                    </div>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Requests;
