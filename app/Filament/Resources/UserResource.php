<?php

namespace App\Filament\Resources;

use App\Filament\Resources\UserResource\Pages;
use App\Filament\Resources\UserResource\RelationManagers;
use App\Models\User;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Support\Facades\Hash;

class UserResource extends Resource
{
    protected static ?string $model = User::class;

    protected static ?string $navigationIcon = 'heroicon-o-users';
    protected static ?string $navigationGroup = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º';
    protected static ?string $navigationLabel = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏';
    protected static ?int $navigationSort = 1;

    protected static ?string $modelLabel = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    protected static ?string $pluralModelLabel = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏';

    public static function getPageLabels(): array
    {
        return [
            'index' => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'create' => '–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'edit' => '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        ];
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                    ->schema([
                        Forms\Components\TextInput::make('surname')
                            ->label('–§–∞–º–∏–ª–∏—è')
                            ->required()
                            ->maxLength(255),
                            
                        Forms\Components\TextInput::make('name')
                            ->label('–ò–º—è')
                            ->required()
                            ->maxLength(255),
                            
                        Forms\Components\TextInput::make('patronymic')
                            ->label('–û—Ç—á–µ—Å—Ç–≤–æ')
                            ->maxLength(255)
                            ->nullable(),
                            
                        Forms\Components\TextInput::make('email')
                            ->label('Email')
                            ->email()
                            ->required()
                            ->maxLength(255)
                            ->unique('users', 'email', ignoreRecord: true)
                            ->validationMessages([
                                'unique' => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                            ]),
                            
                        Forms\Components\TextInput::make('password')
                            ->label('–ü–∞—Ä–æ–ª—å')
                            ->password()
                            ->dehydrateStateUsing(fn ($state) => Hash::make($state))
                            ->dehydrated(fn ($state) => filled($state))
                            ->required(fn (string $context): bool => $context === 'create'),
                    ])->columns(2),
                    
                Forms\Components\Section::make('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                    ->schema([
                        Forms\Components\TextInput::make('phone')
                            ->label('–¢–µ–ª–µ—Ñ–æ–Ω')
                            ->tel()
                            ->maxLength(20)
                            ->nullable(),
                            
                        Forms\Components\TextInput::make('telegram_id')
                            ->label('Telegram ID')
                            ->maxLength(255)
                            ->nullable(),
                    ])->columns(2),
                    
                Forms\Components\Section::make('–†–æ–ª–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')
                    ->schema([
                        Forms\Components\Select::make('roles')
                            ->label('–†–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ')
                            ->relationship('roles', 'name')
                            ->multiple()
                            ->preload()
                            ->searchable()
                            ->live()
                            ->afterStateUpdated(function ($set, $state) {
                                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–∏ executor
                                if (!in_array('executor', $state ?? [])) {
                                    $set('contractor_id', null);
                                }
                            })
                            ->required()
                            ->validationMessages([
                                'required' => '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å',
                            ]),
                            
                        // –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –¢–ò–ü–ê –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø
                        Forms\Components\Radio::make('executor_type')
                            ->label('–¢–∏–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')
                            ->options([
                                'our' => 'üë∑ –ù–∞—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏)',
                                'contractor' => 'üè¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞',
                            ])
                            ->live()
                            ->required(fn (callable $get): bool => 
                                collect($get('roles') ?? [])->contains('executor')
                            )
                            ->visible(fn (callable $get): bool => 
                                collect($get('roles') ?? [])->contains('executor')
                            )
                            ->afterStateUpdated(function ($set, $state) {
                                // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "–Ω–∞—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" –æ—á–∏—â–∞–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
                                if ($state === 'our') {
                                    $set('contractor_id', null);
                                }
                            }),
                            
                        // –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û–õ–ï –ü–û–î–†–Ø–î–ß–ò–ö–ê
                        Forms\Components\Select::make('contractor_id')
                            ->label('–ö–æ–º–ø–∞–Ω–∏—è-–ø–æ–¥—Ä—è–¥—á–∏–∫')
                            ->relationship('contractor', 'name')
                            ->searchable()
                            ->preload()
                            ->helperText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é-–ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')
                            ->visible(fn (callable $get): bool => 
                                collect($get('roles') ?? [])->contains('executor') && 
                                $get('executor_type') === 'contractor'
                            )
                            ->required(fn (callable $get): bool => 
                                collect($get('roles') ?? [])->contains('executor') && 
                                $get('executor_type') === 'contractor'
                            )
                            ->validationMessages([
                                'required' => '–î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é',
                            ]),

                        // –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ù–ê–õ–û–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´
                        Forms\Components\Select::make('contract_type_id')
                            ->label('–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞')
                            ->relationship('contractType', 'name')
                            ->searchable()
                            ->preload()
                            ->live()
                            ->afterStateUpdated(function ($set, $state) {
                                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
                                $set('tax_status_id', null);
                            })
                            ->helperText('–§–æ—Ä–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º')
                            ->visible(fn (callable $get): bool =>
                                collect($get('roles') ?? [])->contains('executor') &&
                                $get('executor_type') === 'our'
                            ),

                        Forms\Components\Select::make('tax_status_id')
                            ->label('–ù–∞–ª–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å')
                            ->relationship(
                                name: 'taxStatus',
                                titleAttribute: 'name',
                                modifyQueryUsing: fn ($query, callable $get) => 
                                    $query->where('contract_type_id', $get('contract_type_id'))
                                          ->where('is_active', true)
                            )
                            ->searchable()
                            ->preload()
                            ->helperText('–ù–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤')
                            ->visible(fn (callable $get): bool =>
                                collect($get('roles') ?? [])->contains('executor') &&
                                $get('executor_type') === 'our' &&
                                $get('contract_type_id')
                            ),    
                            
                        Forms\Components\BelongsToManyCheckboxList::make('specialties')
                            ->label('–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')
                            ->relationship('specialties', 'name')
                            ->searchable()
                            ->helperText('–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å'),
                    ]),
                    
                Forms\Components\Section::make('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')
                    ->schema([
                        Forms\Components\Textarea::make('notes')
                            ->label('–ó–∞–º–µ—Ç–∫–∏')
                            ->maxLength(65535)
                            ->nullable()
                            ->columnSpanFull(),
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('full_name')
                    ->label('–§–ò–û')
                    ->searchable(['name', 'surname', 'patronymic'])
                    ->sortable()
                    ->weight('medium'),
                    
                Tables\Columns\TextColumn::make('email')
                    ->label('Email')
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('phone')
                    ->label('–¢–µ–ª–µ—Ñ–æ–Ω')
                    ->searchable()
                    ->toggleable(),
                    
                Tables\Columns\TextColumn::make('type')
                    ->label('–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                    ->badge()
                    ->getStateUsing(function ($record) {
                        if ($record->isExternalContractor()) return 'üëë –ü–æ–¥—Ä—è–¥—á–∏–∫';
                        if ($record->isOurExecutor()) return 'üë∑ –ù–∞—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
                        if ($record->isContractorExecutor()) return 'üè¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞';
                        if ($record->isInitiator()) return 'üìã –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä';
                        if ($record->isDispatcher()) return 'üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä';
                        return '‚ùì –î—Ä—É–≥–æ–µ';
                    })
                    ->colors([
                        'üëë –ü–æ–¥—Ä—è–¥—á–∏–∫' => 'warning',
                        'üë∑ –ù–∞—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' => 'success', 
                        'üè¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞' => 'info',
                        'üìã –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä' => 'primary',
                        'üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä' => 'gray',
                    ]),
                    
                Tables\Columns\TextColumn::make('roles.name')
                    ->label('–†–æ–ª–∏')
                    ->badge()
                    ->formatStateUsing(fn ($state) => match($state) {
                        'admin' => 'üëë –ê–¥–º–∏–Ω',
                        'initiator' => 'üìã –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä',
                        'dispatcher' => 'üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä',
                        'executor' => 'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
                        'contractor' => 'üè¢ –ü–æ–¥—Ä—è–¥—á–∏–∫',
                        default => $state
                    })
                    ->colors([
                        'danger' => 'admin',
                        'success' => 'initiator',
                        'warning' => 'dispatcher',
                        'info' => 'executor',
                        'gray' => 'contractor',
                    ]),
                    
                Tables\Columns\TextColumn::make('contractor.name')
                    ->label('–ü–æ–¥—Ä—è–¥—á–∏–∫')
                    ->searchable()
                    ->toggleable()
                    ->placeholder('‚Äî')
                    ->formatStateUsing(fn ($state) => $state ?: '‚Äî'),
                    
                Tables\Columns\TextColumn::make('specialties.name')
                    ->label('–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')
                    ->badge()
                    ->separator(', ')
                    ->limitList(2)
                    ->toggleable(),

                Tables\Columns\TextColumn::make('contractType.name')
                    ->label('–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞')
                    ->searchable()
                    ->sortable()
                    ->badge()
                    ->color('gray')
                    ->toggleable()
                    ->placeholder('‚Äî'),

                Tables\Columns\TextColumn::make('taxStatus.name')
                    ->label('–ù–∞–ª–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å')
                    ->searchable()
                    ->sortable()
                    ->badge()
                    ->formatStateUsing(fn ($state, $record) => $state ? "{$state} (" . ($record->taxStatus?->tax_rate * 100) . "%)" : '‚Äî')
                    ->color(fn ($state) => $state ? 'primary' : 'gray')
                    ->toggleable()
                    ->placeholder('‚Äî'),
                    
                Tables\Columns\TextColumn::make('created_at')
                    ->label('–°–æ–∑–¥–∞–Ω')
                    ->dateTime('d.m.Y H:i')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('roles')
                    ->label('–†–æ–ª—å')
                    ->relationship('roles', 'name')
                    ->multiple()
                    ->preload()
                    ->searchable(),
                    
                Tables\Filters\SelectFilter::make('contractor_id')
                    ->label('–ü–æ–¥—Ä—è–¥—á–∏–∫')
                    ->relationship('contractor', 'name')
                    ->searchable()
                    ->preload(),

                Tables\Filters\Filter::make('our_executors')
                    ->label('üë∑ –ù–∞—à–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏')
                    ->query(fn ($query) => $query->ourExecutors()),

                Tables\Filters\Filter::make('contractor_executors')
                    ->label('üè¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤')
                    ->query(fn ($query) => $query->contractorExecutors()),

                Tables\Filters\Filter::make('external_contractors')
                    ->label('üëë –ü–æ–¥—Ä—è–¥—á–∏–∫–∏')
                    ->query(fn ($query) => $query->externalContractors()),

                Tables\Filters\Filter::make('initiators')
                    ->label('üìã –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä—ã')
                    ->query(fn ($query) => $query->role('initiator')),

                Tables\Filters\Filter::make('dispatchers')
                    ->label('üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã')
                    ->query(fn ($query) => $query->role('dispatcher')),

                Tables\Filters\SelectFilter::make('specialties')
                    ->label('–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å')
                    ->relationship('specialties', 'name')
                    ->multiple()
                    ->searchable()
                    ->preload(),

                Tables\Filters\SelectFilter::make('contract_type')
                    ->label('–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞')
                    ->relationship('contractType', 'name')
                    ->searchable()
                    ->preload(),

                Tables\Filters\SelectFilter::make('tax_status')
                    ->label('–ù–∞–ª–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å')
                    ->relationship('taxStatus', 'name')
                    ->searchable()
                    ->preload(),
            ])
            ->actions([
                Tables\Actions\EditAction::make()
                    ->label('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'),
                    
                Tables\Actions\Action::make('view_shifts')
                    ->label('–°–º–µ–Ω—ã')
                    ->icon('heroicon-o-calendar')
                    ->url(fn (User $record) => ShiftResource::getUrl('index', [
                        'tableFilters[user][values]' => [$record->id]
                    ]))
                    ->color('gray')
                    ->hidden(fn ($record) => !$record->canHaveShifts()),
                    
                Tables\Actions\Action::make('view_assignments')
                    ->label('–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º')
                    ->icon('heroicon-o-user-plus')
                    ->url(fn (User $record) => AssignmentResource::getUrl('index', [
                        'tableFilters[brigadier][values]' => [$record->id]
                    ]))
                    ->color('gray')
                    ->hidden(fn ($record) => !$record->canHaveShifts()),
                    
                Tables\Actions\DeleteAction::make()
                    ->label('–£–¥–∞–ª–∏—Ç—å'),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make()
                        ->label('–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ'),
                ]),
            ])
            ->emptyStateHeading('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            ->emptyStateDescription('–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
            ->emptyStateActions([
                Tables\Actions\CreateAction::make()
                    ->label('–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            ])
            ->defaultSort('surname', 'asc');
    }

    public static function getRelations(): array
    {
        return [
            RelationManagers\SpecialtiesRelationManager::class,
            RelationManagers\InitiatedWorkRequestsRelationManager::class,
            RelationManagers\BrigadierWorkRequestsRelationManager::class,
            RelationManagers\DispatcherWorkRequestsRelationManager::class,
            RelationManagers\ShiftsRelationManager::class,
            RelationManagers\BrigadierAssignmentsRelationManager::class,
            RelationManagers\InitiatorGrantsRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUsers::route('/'),
            'create' => Pages\CreateUser::route('/create'),
            'edit' => Pages\EditUser::route('/{record}/edit'),
        ];
    }
    
    public static function canAccess(): bool
    {
        return auth()->user()->hasAnyRole(['admin', 'initiator', 'dispatcher']);
    }
}
