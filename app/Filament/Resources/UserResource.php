<?php

namespace App\Filament\Resources;

use App\Filament\Resources\UserResource\Pages;
use App\Filament\Resources\UserResource\RelationManagers;
use App\Models\User;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Support\Facades\Hash;
use Spatie\Permission\Models\Permission;
use Filament\Notifications\Notification;

class UserResource extends Resource
{
    protected static ?string $model = User::class;

    protected static ?string $navigationIcon = 'heroicon-o-users';

    // –î–û–ë–ê–í–õ–Ø–ï–ú –†–£–°–°–ö–ò–ï LABELS –ò –ì–†–£–ü–ü–£
    protected static ?string $navigationGroup = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º';
    protected static ?string $navigationLabel = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏';
    protected static ?int $navigationSort = 2;

    protected static ?string $modelLabel = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    protected static ?string $pluralModelLabel = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏';

    public static function getPageLabels(): array
    {
        return [
            'index' => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'create' => '–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'edit' => '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        ];
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                    ->schema([
                        Forms\Components\TextInput::make('surname')
                            ->label('–§–∞–º–∏–ª–∏—è')
                            ->required()
                            ->maxLength(255),
                            
                        Forms\Components\TextInput::make('name')
                            ->label('–ò–º—è')
                            ->required()
                            ->maxLength(255),
                            
                        Forms\Components\TextInput::make('patronymic')
                            ->label('–û—Ç—á–µ—Å—Ç–≤–æ')
                            ->maxLength(255),
                            
                        Forms\Components\TextInput::make('email')
                            ->label('Email')
                            ->email()
                            ->required()
                            ->maxLength(255)
                            ->unique('users', 'email', ignoreRecord: true)
                            ->validationMessages([
                                'unique' => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                            ]),
                            
                        Forms\Components\TextInput::make('password')
                            ->label('–ü–∞—Ä–æ–ª—å')
                            ->password()
                            ->dehydrateStateUsing(fn ($state) => Hash::make($state))
                            ->dehydrated(fn ($state) => filled($state))
                            ->required(fn (string $context): bool => $context === 'create'),
                    ])->columns(2),
                    
                Forms\Components\Section::make('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                    ->schema([
                        Forms\Components\TextInput::make('phone')
                            ->label('–¢–µ–ª–µ—Ñ–æ–Ω')
                            ->tel()
                            ->maxLength(255),
                            
                        Forms\Components\TextInput::make('telegram_id')
                            ->label('Telegram ID')
                            ->maxLength(255),
                    ])->columns(2),
                    
                Forms\Components\Section::make('–†–æ–ª–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')
                    ->schema([
                        Forms\Components\Toggle::make('is_contractor')
                            ->label('–ü–æ–¥—Ä—è–¥—á–∏–∫')
                            ->reactive(),
                            
                        Forms\Components\Toggle::make('is_always_brigadier')
                            ->label('–í—Å–µ–≥–¥–∞ –±—Ä–∏–≥–∞–¥–∏—Ä'),
                            
                        Forms\Components\Select::make('contractor_id')
                            ->label('–ö–æ–º–ø–∞–Ω–∏—è-–ø–æ–¥—Ä—è–¥—á–∏–∫')
                            ->relationship('contractor', 'name')
                            ->visible(fn (callable $get) => $get('is_contractor')),
                            
                        Forms\Components\BelongsToManyCheckboxList::make('specialties')
                            ->label('–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')
                            ->relationship('specialties', 'name')
                            ->searchable(),
                            
                        Forms\Components\Select::make('roles')
                            ->label('–†–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ')
                            ->relationship('roles', 'name')
                            ->multiple()
                            ->preload()
                            ->reactive()
                            ->afterStateUpdated(function ($set, $state) {
                                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏
                                $set('permissions', []);
                            }),
                            
                        Forms\Components\Select::make('permissions')
                            ->label('–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞')
                            ->relationship('permissions', 'name')
                            ->multiple()
                            ->preload()
                            ->searchable()
                            ->options(function ($get) {
                                $roles = $get('roles') ?? [];
                                
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î —Ç–æ–ª—å–∫–æ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞–º –∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
                                $allowedRoles = ['initiator', 'dispatcher'];
                                $hasAllowedRole = !empty(array_intersect($allowedRoles, $roles));
                                
                                if ($hasAllowedRole) {
                                    return Permission::where('name', 'edit_database')
                                        ->orWhere('name', 'like', 'view_%')
                                        ->pluck('name', 'name') // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º description
                                        ->map(function ($name) {
                                            return match($name) {
                                                'edit_database' => 'üìä –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                                                'view_projects' => 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤',
                                                'view_purposes' => 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π',
                                                'view_addresses' => 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–¥—Ä–µ—Å–æ–≤',
                                                'view_work_requests' => 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫',
                                                default => $name
                                            };
                                        });
                                }
                                
                                return [];
                            })
                            ->helperText(function ($get) {
                                $roles = $get('roles') ?? [];
                                $allowedRoles = ['initiator', 'dispatcher'];
                                $hasAllowedRole = !empty(array_intersect($allowedRoles, $roles));
                                
                                if ($hasAllowedRole) {
                                    return '‚úÖ –ú–æ–∂–µ—Ç–µ –¥–∞—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é';
                                }
                                return '‚ö†Ô∏è –ü—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞–º –∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º';
                            }),
                    ]),
                    
                Forms\Components\Section::make('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')
                    ->schema([
                        Forms\Components\Textarea::make('notes')
                            ->label('–ó–∞–º–µ—Ç–∫–∏')
                            ->maxLength(65535)
                            ->columnSpanFull(),
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('surname')
                    ->label('–§–∞–º–∏–ª–∏—è')
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('name')
                    ->label('–ò–º—è')
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('patronymic')
                    ->label('–û—Ç—á–µ—Å—Ç–≤–æ')
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('email')
                    ->label('Email')
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('phone')
                    ->label('–¢–µ–ª–µ—Ñ–æ–Ω')
                    ->searchable(),
                    
                Tables\Columns\IconColumn::make('is_contractor')
                    ->label('–ü–æ–¥—Ä—è–¥—á–∏–∫')
                    ->boolean(),
                    
                Tables\Columns\IconColumn::make('is_always_brigadier')
                    ->label('–ë—Ä–∏–≥–∞–¥–∏—Ä')
                    ->boolean(),
                    
                Tables\Columns\TextColumn::make('specialties.name')
                    ->label('–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')
                    ->badge()
                    ->separator(', '),
                    
                Tables\Columns\TextColumn::make('roles.name')
                    ->label('–†–æ–ª–∏')
                    ->badge()
                    ->formatStateUsing(fn ($state) => match($state) {
                        'admin' => 'üëë –ê–¥–º–∏–Ω',
                        'initiator' => 'üìã –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä',
                        'dispatcher' => 'üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä',
                        'executor' => 'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
                        'contractor' => 'üè¢ –ü–æ–¥—Ä—è–¥—á–∏–∫',
                        default => $state
                    })
                    ->colors([
                        'danger' => 'admin',
                        'success' => 'initiator',
                        'warning' => 'dispatcher',
                        'info' => 'executor',
                        'gray' => 'contractor',
                    ]),
                    
                Tables\Columns\IconColumn::make('can_edit_database')
                    ->label('–†–µ–¥–∞–∫—Ç. –ë–î')
                    ->getStateUsing(fn ($record) => $record->hasPermissionTo('edit_database'))
                    ->boolean()
                    ->trueIcon('heroicon-o-cog-6-tooth')
                    ->trueColor('success')
                    ->falseColor('gray')
                    ->tooltip(fn ($record) => $record->hasPermissionTo('edit_database') 
                        ? '–ú–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ë–î' 
                        : '–ù–µ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ë–î'),
                    
                Tables\Columns\TextColumn::make('created_at')
                    ->label('–°–æ–∑–¥–∞–Ω')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                // –û–ë–ù–û–í–õ–Ø–ï–ú –§–ò–õ–¨–¢–†–´ –° –†–£–°–°–ö–ò–ú–ò –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò
                Tables\Filters\TernaryFilter::make('is_contractor')
                    ->label('–ü–æ–¥—Ä—è–¥—á–∏–∫–∏')
                    ->placeholder('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
                    ->trueLabel('–¢–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∏')
                    ->falseLabel('–¢–æ–ª—å–∫–æ –Ω–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∏'),
                    
                Tables\Filters\TernaryFilter::make('is_always_brigadier')
                    ->label('–ë—Ä–∏–≥–∞–¥–∏—Ä—ã')
                    ->placeholder('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
                    ->trueLabel('–¢–æ–ª—å–∫–æ –±—Ä–∏–≥–∞–¥–∏—Ä—ã')
                    ->falseLabel('–¢–æ–ª—å–∫–æ –Ω–µ –±—Ä–∏–≥–∞–¥–∏—Ä—ã'),
                    
                Tables\Filters\SelectFilter::make('specialties')
                    ->label('–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å')
                    ->relationship('specialties', 'name')
                    ->multiple()
                    ->searchable()
                    ->preload(),
                    
                Tables\Filters\SelectFilter::make('roles')
                    ->label('–†–æ–ª—å')
                    ->relationship('roles', 'name')
                    ->multiple()
                    ->preload()
                    ->searchable(),
                    
                Tables\Filters\TernaryFilter::make('can_edit_database')
                    ->label('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î')
                    ->placeholder('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
                    ->trueLabel('–ú–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ë–î')
                    ->falseLabel('–ù–µ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ë–î')
                    ->query(fn ($query, array $data) => match($data['value'] ?? null) {
                        true => $query->whereHas('permissions', fn($q) => $q->where('name', 'edit_database')),
                        false => $query->whereDoesntHave('permissions', fn($q) => $q->where('name', 'edit_database')),
                        default => $query,
                    }),
            ])
            // –û–ë–ù–û–í–õ–Ø–ï–ú ACTIONS –° –†–£–°–°–ö–ò–ú–ò –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò
            ->actions([
                Tables\Actions\EditAction::make()
                    ->label('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'),
                    
                Tables\Actions\Action::make('toggle_database_edit')
                    ->label('–ü—Ä–∞–≤–æ —Ä–µ–¥–∞–∫—Ç. –ë–î')
                    ->icon('heroicon-o-cog-6-tooth')
                    ->action(function (User $record) {
                        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è ...
                    })
                    ->visible(fn () => auth()->user()->hasRole('admin'))
                    ->color(fn (User $record) => $record->hasPermissionTo('edit_database') ? 'danger' : 'success')
                    ->tooltip(fn (User $record) => $record->hasPermissionTo('edit_database') 
                        ? '–û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î' 
                        : '–î–∞—Ç—å –ø—Ä–∞–≤–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î'),
                        
                Tables\Actions\DeleteAction::make()
                    ->label('–£–¥–∞–ª–∏—Ç—å'),
            ])
            // –û–ë–ù–û–í–õ–Ø–ï–ú BULK ACTIONS
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make()
                        ->label('–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ'),
                ]),
            ])
            ->defaultSort('surname', 'asc');
    }

    public static function getRelations(): array
    {
        return [
            RelationManagers\InitiatedWorkRequestsRelationManager::class,
            RelationManagers\BrigadierWorkRequestsRelationManager::class,
            RelationManagers\DispatcherWorkRequestsRelationManager::class,
            RelationManagers\ShiftsRelationManager::class,
            RelationManagers\BrigadierAssignmentsRelationManager::class,
            RelationManagers\InitiatorGrantsRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUsers::route('/'),
            'create' => Pages\CreateUser::route('/create'),
            'edit' => Pages\EditUser::route('/{record}/edit'),
        ];
    }
    
    public static function canAccess(): bool
    {
        return auth()->user()->hasRole('admin');
    }
}
