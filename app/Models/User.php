<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles;

    protected $fillable = [
        'name',
        'surname',
        'patronymic',
        'email',
        'password',
        'phone',
        'telegram_id',
        'contractor_id',
        'contract_type_id', // –î–û–ë–ê–í–ò–¢–¨
        'tax_status_id',    // –î–û–ë–ê–í–ò–¢–¨
        'notes',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    // === –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ê–¢–†–ò–ë–£–¢–´ –î–õ–Ø FILAMENT ===
    
    /**
     * Accessor –¥–ª—è —Ç–∏–ø–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–¥–ª—è Filament)
     */
    public function getExecutorTypeAttribute()
    {
        if (!$this->hasRole('executor')) {
            return null;
        }
        
        return $this->contractor_id ? 'contractor' : 'our';
    }

    /**
     * Mutator –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
     */
    public function setExecutorTypeAttribute($value)
    {
        if ($value === 'our') {
            $this->contractor_id = null;
        }
        // –î–ª—è 'contractor' contractor_id —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
    }

    // === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    
    public function isInitiator()
    {
        return $this->hasRole('initiator') && !$this->canHaveShifts();
    }
    
    public function isDispatcher() 
    {
        return $this->hasRole('dispatcher') && !$this->canHaveShifts();
    }
    
    // User-–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ (—É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏–µ–π)
    public function isExternalContractor()
    {
        return $this->hasRole('contractor') && is_null($this->contractor_id);
    }
    
    // –ù–∞—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏)
    public function isOurExecutor()
    {
        return $this->hasRole('executor') && is_null($this->contractor_id);
    }
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
    public function isContractorExecutor()
    {
        return $this->hasRole('executor') && !is_null($this->contractor_id);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public function getUserTypeAttribute(): string
    {
        if ($this->isExternalContractor()) return 'üëë –ü–æ–¥—Ä—è–¥—á–∏–∫';
        if ($this->isOurExecutor()) return 'üë∑ –ù–∞—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
        if ($this->isContractorExecutor()) return 'üè¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞';
        if ($this->isInitiator()) return 'üìã –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä';
        if ($this->isDispatcher()) return 'üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä';
        return '‚ùì –î—Ä—É–≥–æ–µ';
    }
    
    // –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏
    public function canCreateWorkRequests()
    {
        return $this->hasAnyRole(['initiator', 'dispatcher']);
    }
    
    // –ú–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–º–µ–Ω—ã (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
    public function canHaveShifts()
    {
        return $this->hasRole('executor');
    }
    
    // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    public function isBrigadier($date = null)
    {
        $date = $date ?: now();
        
        return $this->brigadierAssignments()
            ->whereHas('assignmentDates', function($q) use ($date) {
                $q->whereDate('assignment_date', $date)
                  ->where('status', 'confirmed');
            })
            ->exists();
    }

    // === –°–í–Ø–ó–ò ===
    // –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: –∫–æ–º–ø–∞–Ω–∏—è-–ø–æ–¥—Ä—è–¥—á–∏–∫
    public function contractor()
    {
        return $this->belongsTo(Contractor::class);
    }

    // –î–ª—è user-–ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: —É–ø—Ä–∞–≤–ª—è–µ–º–∞—è –∫–æ–º–ø–∞–Ω–∏—è
    public function managedContractor()
    {
        return $this->hasOne(Contractor::class, 'user_id');
    }

    public function specialties()
    {
        return $this->belongsToMany(Specialty::class, 'user_specialties')
                    ->withPivot('base_hourly_rate')
                    ->withTimestamps();
    }

    public function initiatedRequests()
    {
        return $this->hasMany(WorkRequest::class, 'initiator_id');
    }

    public function brigadierRequests()
    {
        return $this->hasMany(WorkRequest::class, 'brigadier_id');
    }

    public function dispatcherRequests()
    {
        return $this->hasMany(WorkRequest::class, 'dispatcher_id');
    }

    public function brigadierAssignments()
    {
        return $this->hasMany(BrigadierAssignment::class, 'brigadier_id');
    }

    public function initiatedBrigadierAssignments()
    {
        return $this->hasMany(BrigadierAssignment::class, 'initiator_id');
    }

    public function shifts()
    {
        return $this->hasMany(Shift::class);
    }

    public function assignments()
    {
        return $this->hasMany(Assignment::class);
    }

    public function grantedInitiatorRights()
    {
        return $this->hasMany(InitiatorGrant::class, 'brigadier_id');
    }

    public function givenInitiatorRights()
    {
        return $this->hasMany(InitiatorGrant::class, 'initiator_id');
    }

    // –í –º–æ–¥–µ–ª—å User –¥–æ–±–∞–≤–ª—è–µ–º:
    public function contractType()
    {
        return $this->belongsTo(ContractType::class);
    }

    public function taxStatus()
    {
        return $this->belongsTo(TaxStatus::class);
    }

    // === SCOPES ===
    public function scopeBrigadiers($query)
    {
        return $query->whereHas('brigadierAssignments', function($q) {
            $q->whereHas('assignmentDates', function($q) {
                $q->where('status', 'confirmed');
            });
        });
    }

    public function scopeOurExecutors($query)
    {
        return $query->whereHas('roles', function($q) {
            $q->where('name', 'executor');
        })->whereNull('contractor_id');
    }

    public function scopeContractorExecutors($query, $contractorId = null)
    {
        $query = $query->whereHas('roles', function($q) {
            $q->where('name', 'executor');
        })->whereNotNull('contractor_id');
        
        if ($contractorId) {
            $query->where('contractor_id', $contractorId);
        }
        
        return $query;
    }

    public function scopeExternalContractors($query)
    {
        return $query->whereHas('roles', function($q) {
            $q->where('name', 'contractor');
        })->whereNull('contractor_id');
    }

    public function scopeAvailable($query, $date)
    {
        return $query->whereDoesntHave('shifts', function($q) use ($date) {
            $q->whereDate('work_date', $date)
              ->whereIn('status', ['active', 'completed']);
        });
    }

    // === –ú–ï–¢–û–î–´ ===
    public function getFullNameAttribute()
    {
        $parts = array_filter([$this->surname, $this->name, $this->patronymic]);
        return implode(' ', $parts) ?: $this->name;
    }

    public function canCreateRequestsAsBrigadier($date)
    {
        return $this->brigadierAssignments()
            ->whereHas('assignmentDates', function($q) use ($date) {
                $q->whereDate('assignment_date', $date)
                  ->where('status', 'confirmed');
            })
            ->where('can_create_requests', true)
            ->exists();
    }

    public function getExecutorRole($date = null)
    {
        $date = $date ?: now();
        
        if ($this->isBrigadier($date)) {
            return $this->canCreateRequestsAsBrigadier($date) 
                ? 'brigadier_with_rights' 
                : 'brigadier';
        }
        
        return 'executor';
    }

    public function getExecutorRoleDisplay($date = null)
    {
        $role = $this->getExecutorRole($date);
        $roles = [
            'executor' => '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
            'brigadier' => '–ë—Ä–∏–≥–∞–¥–∏—Ä', 
            'brigadier_with_rights' => '–ë—Ä–∏–≥–∞–¥–∏—Ä (–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏)'
        ];
        return $roles[$role] ?? '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–µ—Å–ª–∏ —ç—Ç–æ user-–ø–æ–¥—Ä—è–¥—á–∏–∫)
    public function getManagedExecutors()
    {
        if (!$this->isExternalContractor()) {
            return collect();
        }
        
        return $this->managedContractor?->executors ?? collect();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–º–µ–Ω—ã –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
    public function getContractorShifts()
    {
        if (!$this->isExternalContractor()) {
            return collect();
        }
        
        return $this->managedContractor?->allShifts() ?? collect();
    }

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê ===
    
    /**
     * Boot –º–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
     */
    protected static function boot()
    {
        parent::boot();

        static::saving(function ($user) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–¥—Ä—è–¥—á–∏–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
            if ($user->hasRole('executor') && $user->isContractorExecutor() && !$user->contractor_id) {
                throw new \Exception('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ–¥—Ä—è–¥—á–∏–∫—É');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–¥—Ä—è–¥—á–∏–∫—É
            if ($user->hasRole('executor') && $user->isOurExecutor() && $user->contractor_id) {
                throw new \Exception('–ù–∞—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–¥—Ä—è–¥—á–∏–∫—É');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é contractor –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–¥—Ä—è–¥—á–∏–∫—É
            if ($user->hasRole('contractor') && $user->contractor_id) {
                $existingContractor = Contractor::where('user_id', $user->id)->first();
                if ($existingContractor && $existingContractor->id != $user->contractor_id) {
                    throw new \Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é contractor —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–¥—Ä—è–¥—á–∏–∫—É');
                }
            }
        });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getExecutorTypeInfo
    public function getExecutorTypeInfo(): array
    {
        if (!$this->hasRole('executor')) {
            return ['type' => 'not_executor', 'label' => '–ù–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'];
        }

        if ($this->isOurExecutor()) {
            return [
                'type' => 'our',
                'label' => 'üë∑ –ù–∞—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
                'description' => '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏',
                'contractor' => null,
                'contract_type' => $this->contractType?->name,
                'tax_status' => $this->taxStatus?->name
            ];
        }

        if ($this->isContractorExecutor()) {
            return [
                'type' => 'contractor',
                'label' => 'üè¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞',
                'description' => '–í–Ω–µ—à–Ω–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
                'contractor' => $this->contractor,
                'contract_type' => $this->contractor?->contractType?->name,
                'tax_status' => $this->contractor?->taxStatus?->name
            ];
        }

        return ['type' => 'unknown', 'label' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'];
    }

    // === –°–¢–ê–í–ö–ò - –ù–û–í–´–ï –ú–ï–¢–û–î–´ ===

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫—É –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
     */

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç
     */
}
